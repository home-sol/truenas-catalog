{{/*
Create the matchable regex from domain
*/}}
{{- define "k8s-gateway.configmap.regex" -}}
{{- if .domain }}
{{- .domain | replace "." "[.]" -}}
{{- else -}}
    {{ "unset" }}
{{- end }}
{{- end -}}

{{- $fqdn := ( include "common.names.fqdn" . ) }}

---
{{ include "common.configmap.common_config" . | nindent 0 }}
data:
  Corefile: |-
    .:53 {
        errors
        {{ if .Values.debug.enabled }}
        debug
        {{- end }}
        log
        health {
            lameduck 5s
        }
        ready
        {{- range .Values.domains }}
        {{- include "common.schema.validateKeys" (dict "values" . "checkKeys" (list "domain")) -}}
        {{- if .dnsChallenge.enabled }}
        {{- include "common.schema.validateKeys" (dict "values" .dnsChallenge "checkKeys" (list "domain")) -}}
        template IN ANY .domain {
           match "_acme-challenge[.](.*)[.]{{ include "k8s-gateway.configmap.regex" . }}"
           answer "{{ "{{" }} .Name {{ "}}" }} 5 IN CNAME {{ "{{" }}  index .Match 1 {{ "}}" }}.{{ .dnsChallenge.domain }}"
           fallthrough
        }
        {{- end }} {{/* if .dnsChallenge.enabled*/}}
        k8s_gateway "{{ .domain }}" {
          apex {{ .apex | default $fqdn }}
          ttl {{ .ttl }}
          {{- if .secondary }}
          secondary {{ .secondary }}
          {{- end }}
          {{- if .watchedResources }}
          resources {{ join " " .watchedResources }}
          {{- end }}
          {{- if .fallthrough.enabled }}
          fallthrough
          {{- end }}
        }
        {{- end }} {{/* range .Values.domains */}}
        {{- if .Values.forward.enabled }}
        forward . {{ .Values.forward.primary }} {{ .Values.forward.secondary }} {
          {{- range .Values.forward.options }}
          {{ .name }} {{ .value }}
          {{- end }}
        }
        {{- end }}
        {{- if .Values.extraZonePlugins -}}
        {{- .Values.extraZonePlugins | nindent 8 }}
        {{- end }}
        prometheus 0.0.0.0:9153
        loop
        reload
        loadbalance
    }